/////////////////////////////////////////////////////////////////////////
//
// Authors: Mateusz Jurczyk (mjurczyk@google.com)
//          Gynvael Coldwind (gynvael@google.com)
//
// Copyright 2013-2018 Google LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
syntax = "proto2";

// Descriptor of a single executable module referenced in the stack trace(s) of
// one or more memory access logs.
message module_st {
  required string name = 1;
  required uint64 base_addr = 2;
  required uint64 size = 3;
}

// Descriptor of a single memory access, saved in the trace log file.
message log_data_st {
  // Linear address of the accessed memory.
  required uint64 lin = 1;

  // Memory access length (in bytes). This value can be 1/2/4/8, and
  // symbolizes the size of a single atomic memory fetch. If a continuous
  // memory area has been referenced using fetches of the same size, the
  // "repeated" field will contain the number of repetitions. The following
  // value:
  //               len * repeated
  // makes the total size of the referenced memory area.
  required uint32 len = 2;

  // How many fetches of consecutive memory addresses starting from "lin"
  // have been performed one after another. Typically equal to 1.
  required uint32 repeated = 3;

  enum mem_access_type {
    MEM_READ = 0;
    MEM_WRITE = 1;
    MEM_EXEC = 2;
    MEM_RW = 3;
  };

  // Type of memory access. The Read/Write type is reserved for
  // instructions which read from a memory area and immediately write back
  // to it (e.g. inc [mem32]).
  required mem_access_type access_type = 4;

  // Absolute EIP or RIP of the instruction provoking the memory fetch.
  required uint64 pc = 5;

  // Number of syscalls previously invoked by this thread.
  required uint32 syscall_count = 6;

  // ID number of the last syscall invoked in the thread.
  required uint32 syscall_id = 7;

  // Process filename.
  required bytes image_file_name = 8;
  // Process ID.
  required uint32 process_id = 9;
  // Thread ID.
  required uint32 thread_id = 10;
  // Thread creation time.
  required uint64 create_time = 11;

  message callstack_item {
    required int32 module_idx = 1;
    required uint64 relative_pc = 2;
    required uint64 stack_frame = 3;
    
    // XXX: Windows 32-bit only. If the function has a SEH exception record,
    // the value contains the TryLevel field of the _EH3_EXCEPTION_REGISTRATION
    // structure, which indicates if the specific area of code being executed is
    // guarded by a try/except statement or not. A value of 0xFFFFFFFE means the
    // exception handler is disabled, while positive values close to 0 identify
    // an active try/except block.
    optional uint32 try_level = 4;
  }

  // A stack trace at the time of the memory access.
  //
  // Note: modules[stack_trace[0].module_idx].base_addr + stack_trace[0].relative_pc
  // should be equal to the "pc" value.
  repeated callstack_item stack_trace = 12;

  // Textual representation of the memory-fetching instruction.
  required string pc_disasm = 13;

  // XXX: Windows only. The field contains the PreviousMode bit denoting
  // whether the system service was called from user or kernel-mode.
  optional uint32 previous_mode = 14;
}

